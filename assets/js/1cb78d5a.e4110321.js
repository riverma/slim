"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2896],{5276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var i=n(7462),a=(n(7294),n(3905)),r=n(614);const l="repos:\n  - repo: local\n    hooks:\n      - id: grype-cve-scan\n        name: Grype Vulnerability Scan\n        description: Scans for dependency vulnerabilities. Fails if CRITICAL vulnerabilities detected.\n        entry: python -c \"import subprocess; import sys; result=subprocess.run(['grype', 'dir:.', '--fail-on', 'critical'], capture_output=True); print(result.stdout.decode()); print('CRITICAL vulnerabilities deteced. Please run scan, address issues via `grype dir:.` and `git add` then `git commit` your fix or ignore via `git commit --no-verify`'); sys.exit(result.returncode)\"\n        language: system",o={},s="Dependency Vulnerability Scanning",u={unversionedId:"guides/software-lifecycle/security/dependency-vulnerability-scanning/README",id:"guides/software-lifecycle/security/dependency-vulnerability-scanning/README",title:"Dependency Vulnerability Scanning",description:"A guide to scanning packaged software dependencies and container images for security vulnerabilities both manually and automatically.",source:"@site/docs/guides/software-lifecycle/security/dependency-vulnerability-scanning/README.mdx",sourceDirName:"guides/software-lifecycle/security/dependency-vulnerability-scanning",slug:"/guides/software-lifecycle/security/dependency-vulnerability-scanning/",permalink:"/slim/docs/guides/software-lifecycle/security/dependency-vulnerability-scanning/",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/security/dependency-vulnerability-scanning/README.mdx",tags:[],version:"current",frontMatter:{},sidebar:"guidesSidebar",previous:{title:"Security",permalink:"/slim/docs/category/security"},next:{title:"GitHub Security Best Practices",permalink:"/slim/docs/guides/software-lifecycle/security/github-security/"}},c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"Step 1: Setup Automated Local Scanning of Container Vulnerabilities",id:"step-1-setup-automated-local-scanning-of-container-vulnerabilities",level:3},{value:"Step 2: Setup Automated Local Scanning of Container Vulnerabilities",id:"step-2-setup-automated-local-scanning-of-container-vulnerabilities",level:3},{value:"Step 3: Set Up Automated Repository Scanning",id:"step-3-set-up-automated-repository-scanning",level:3},{value:"Frequently Asked Questions (FAQ)",id:"frequently-asked-questions-faq",level:2},{value:"Credits",id:"credits",level:2},{value:"Feedback and Contributions",id:"feedback-and-contributions",level:2}],d={toc:p},m="wrapper";function k(e){let{components:t,...o}=e;return(0,a.kt)(m,(0,i.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-vulnerability-scanning"},"Dependency Vulnerability Scanning"),(0,a.kt)("pre",{align:"center"},"A guide to scanning packaged software dependencies and container images for security vulnerabilities both manually and automatically."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"banner-image",src:n(2160).Z,width:"1060",height:"368"})),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Background"),": To maintain the integrity and security of your applications in production environments, it's essential to monitor dependency vulnerabilities. Third-party software dependencies can harbor security vulnerabilities. This guide focuses on utilizing Grype, an open source vulnerability scanner, to proactively detect vulnerabilities in dependencies defined within packages and container images."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Cases"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Scanning container images for vulnerabilities during the development phase"),(0,a.kt)("li",{parentName:"ul"},"Ensuring base container images are as vulnerability-free as possible"),(0,a.kt)("li",{parentName:"ul"},"Scanning package-manager defined software dependencies (e.g. NPM, YARN, Maven, etc.) for vulnerabilities during the development phase"),(0,a.kt)("li",{parentName:"ul"},"Automating vulnerability detection in repositories")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Software:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OCI compliant containers (e.g. Docker, Podman) or other package-manager software dependencies"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pre-commit")," framework")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Skills:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Basic knowledge of Git hooks and Docker commands"),(0,a.kt)("li",{parentName:"ul"},"Understanding of YAML for pre-commit configuration")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Run a local scan of your container's repository (folder containing the Dockerfile) using ",(0,a.kt)("a",{parentName:"strong",href:"https://github.com/anchore/grype"},"Grype"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"grype dir:.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u2b07\ufe0f ",(0,a.kt)("a",{target:"_blank",href:n(5598).Z},".pre-commit-config.yml"))),(0,a.kt)("p",null,"Download the file above to access the pre-commit configuration file, which includes an example hook for Grype vulnerability scanning. This file should be placed within your local Git repository after installing the pre-commit framework."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"step-by-step-guide"},"Step-by-Step Guide"),(0,a.kt)("h3",{id:"step-1-setup-automated-local-scanning-of-container-vulnerabilities"},"Step 1: Setup Automated Local Scanning of Container Vulnerabilities"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Ensure Grype is installed on your system. You can install Grype from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/anchore/grype"},"the official repository"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"grype version\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Perform a scan of the local repository for vulnerabilities:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"grype dir:.\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If you find vulnerabilities, fix them via your package manager. "))),(0,a.kt)("h3",{id:"step-2-setup-automated-local-scanning-of-container-vulnerabilities"},"Step 2: Setup Automated Local Scanning of Container Vulnerabilities"),(0,a.kt)("p",null,"\u26a0\ufe0f NOTE: We recommend installing this pre-commit hook only if you have already scanned your repository and addressed any vulnerabilities."),(0,a.kt)("p",null,"The below steps, once enacted, will ensure that any local ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," actions taken will be followed by an automated vulnerability scan. If vulnerabilities at the CRITICAL level are found, the commit will be blocked by default."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Install the pre-commit framework via Python:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pre-commit\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},".pre-commit-config.yaml")," file in the root directory of your Git repository with the following content for Grype scanning:"),(0,a.kt)(r.Z,{language:"yaml",mdxType:"CodeBlock"},l)),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Initialize pre-commit in your repository with the new configuration:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pre-commit install\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Grype-based vulnerability scanning should run every time a ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," is invoked. The commit will be blocked if CRITICAL level vulnerabilities are found and will ask the developer to fix them prior to committing. "))),(0,a.kt)("h3",{id:"step-3-set-up-automated-repository-scanning"},"Step 3: Set Up Automated Repository Scanning"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"GitHub"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We recommend installing the official Grype GitHub action to set up automated dependency vulnerability scanning. Available ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/marketplace/actions/anchore-container-scan"},"at this link"),"."),(0,a.kt)("li",{parentName:"ul"},"We also recommend setting up GitHub's official Dependabot action to also look for vulnerabilities. See our ",(0,a.kt)("a",{parentName:"li",href:"/docs/guides/software-lifecycle/security/github-security"},"GitHub Security Guide")," on this. ")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"frequently-asked-questions-faq"},"Frequently Asked Questions (FAQ)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Q: What happens if the pre-commit scan finds vulnerabilities?")),(0,a.kt)("p",null,"A: The pre-commit hook will prevent you from committing changes until the vulnerabilities are resolved. The scan is set to alert only for ",(0,a.kt)("inlineCode",{parentName:"p"},"critical")," vulnerabilities by default to minimize disruption."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Q: What if I want to skip the pre-commit scan temporarily?")),(0,a.kt)("p",null,"A: You can bypass the hook by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-verify")," flag with the ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," command, though this is generally not recommended."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Q: Is it possible to run vulnerability scans without pre-commit hooks?")),(0,a.kt)("p",null,"A: Yes, you can incorporate scans into your CI/CD pipeline or utilize other repository scanning tools, which can prevent pushing vulnerable code."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Q: What's the difference between Grype and GitHub's Dependabot? Why do I need both?")),(0,a.kt)("p",null,"A: Grype relies on free and open software vulnerability databases whereas GitHub's Dependabot may be using proprietary methods. In our testing, we've found some non-overlapping vulnerabilities that are sometimes found in one tool but not the other."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"credits"},"Credits"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Authorship"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.github.com/riverma"},"Rishi Verma"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Acknowledgements"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OPERA SDS Project for implementation guidance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ddalton-swe"},"@ddalton-swe")," for tool suggestions")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"feedback-and-contributions"},"Feedback and Contributions"),(0,a.kt)("p",null,"We welcome feedback and contributions to enhance this guide further. Please refer to our ",(0,a.kt)("a",{parentName:"p",href:"https://nasa-ammos.github.io/slim/docs/contribute/contributing/"},"contribution guidelines"),"."))}k.isMDXComponent=!0},5598:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/files/.pre-commit-config-35b1955dccd727483802f20c84832f86.yml"},2160:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/vulnerability-scanning-screen-57ff8ea9c83b29e0d64c26361906d042.png"}}]);